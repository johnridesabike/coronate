// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Belt_Map from "rescript/lib/es6/belt_Map.js";
import * as Belt_Set from "rescript/lib/es6/belt_Set.js";
import * as Db$Coronate from "../../Db.res.js";
import * as PervasivesU from "rescript/lib/es6/pervasivesU.js";
import * as TestData$Coronate from "../../testdata/TestData.res.js";
import * as Data_Player$Coronate from "../../Data/Data_Player.res.js";
import * as Data_Rounds$Coronate from "../../Data/Data_Rounds.res.js";

function log2(num) {
  return Math.log(num) / Math.log(2.0);
}

function calcNumOfRounds(playerCount) {
  var roundCount = Math.ceil(log2(playerCount));
  if (roundCount !== PervasivesU.neg_infinity) {
    return roundCount | 0;
  } else {
    return 0;
  }
}

function tournamentReducer(param, action) {
  return action;
}

function LoadTournament_mock(props) {
  var match = React.useReducer(tournamentReducer, Belt_Map.getExn(TestData$Coronate.tournaments, props.tourneyId));
  var tourney = match[0];
  var roundList = tourney.roundList;
  var playerIds = tourney.playerIds;
  var match$1 = Db$Coronate.useAllPlayers();
  var players = match$1.items;
  var activePlayers = Belt_Map.keep(players, (function (id, param) {
          return Belt_Set.has(playerIds, id);
        }));
  var roundCount = calcNumOfRounds(Belt_Map.size(activePlayers));
  var isItOver = Data_Rounds$Coronate.size(roundList) >= roundCount;
  var isNewRoundReady = Data_Rounds$Coronate.size(roundList) === 0 ? true : Data_Rounds$Coronate.isRoundComplete(roundList, activePlayers, Data_Rounds$Coronate.size(roundList) - 1 | 0);
  return props.children({
              activePlayers: activePlayers,
              getPlayer: (function (extra) {
                  return Data_Player$Coronate.getMaybe(players, extra);
                }),
              isItOver: isItOver,
              isNewRoundReady: isNewRoundReady,
              players: players,
              playersDispatch: match$1.dispatch,
              roundCount: roundCount,
              tourney: tourney,
              setTourney: match[1]
            });
}

var tournamentData = TestData$Coronate.tournaments;

var make = LoadTournament_mock;

export {
  log2 ,
  tournamentData ,
  calcNumOfRounds ,
  tournamentReducer ,
  make ,
}
/* react Not a pure module */
