// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Belt_Map from "rescript/lib/es6/belt_Map.js";
import * as Belt_Set from "rescript/lib/es6/belt_Set.js";
import * as Data_Id$Coronate from "../Data/Data_Id.res.js";
import * as TestData$Coronate from "../testdata/TestData.res.js";
import * as Data_Auth$Coronate from "../Data/Data_Auth.res.js";
import * as Data_Config$Coronate from "../Data/Data_Config.res.js";
import * as Data_Player$Coronate from "../Data/Data_Player.res.js";
import * as LocalForage_Id$Coronate from "../Externals/LocalForage_Id.res.js";
import * as Data_Tournament$Coronate from "../Data/Data_Tournament.res.js";
import * as LocalForage_Map$Coronate from "../Externals/LocalForage_Map.res.js";

var Config = LocalForage_Id$Coronate.MakeEncodable({
      encode: Data_Config$Coronate.encode,
      decode: Data_Config$Coronate.decode
    });

var Player = LocalForage_Id$Coronate.MakeEncodable({
      encode: Data_Player$Coronate.encode,
      decode: Data_Player$Coronate.decode
    });

var Tournament = LocalForage_Id$Coronate.MakeEncodable({
      encode: Data_Tournament$Coronate.encode,
      decode: Data_Tournament$Coronate.decode
    });

var tournaments = LocalForage_Map$Coronate.make({
      name: "Coronate",
      storeName: "Tournaments"
    }, Tournament);

function loadDemoDB() {
  
}

function genericDbReducer(state, action) {
  switch (action.TAG) {
    case "Del" :
        return Belt_Map.remove(state, action._0);
    case "Set" :
        return Belt_Map.set(state, action._0, action._1);
    case "SetAll" :
        return action._0;
    
  }
}

function configReducer(state, action) {
  switch (action.TAG) {
    case "AddAvoidPair" :
        return {
                avoidPairs: Belt_Set.add(state.avoidPairs, action._0),
                byeValue: state.byeValue,
                lastBackup: state.lastBackup,
                whiteAlias: state.whiteAlias,
                blackAlias: state.blackAlias
              };
    case "DelAvoidPair" :
        return {
                avoidPairs: Belt_Set.remove(state.avoidPairs, action._0),
                byeValue: state.byeValue,
                lastBackup: state.lastBackup,
                whiteAlias: state.whiteAlias,
                blackAlias: state.blackAlias
              };
    case "DelAvoidSingle" :
        var id = action._0;
        return {
                avoidPairs: Belt_Set.keep(state.avoidPairs, (function (pair) {
                        return !Data_Id$Coronate.Pair.has(pair, id);
                      })),
                byeValue: state.byeValue,
                lastBackup: state.lastBackup,
                whiteAlias: state.whiteAlias,
                blackAlias: state.blackAlias
              };
    case "SetAvoidPairs" :
        return {
                avoidPairs: action._0,
                byeValue: state.byeValue,
                lastBackup: state.lastBackup,
                whiteAlias: state.whiteAlias,
                blackAlias: state.blackAlias
              };
    case "SetByeValue" :
        return {
                avoidPairs: state.avoidPairs,
                byeValue: action._0,
                lastBackup: state.lastBackup,
                whiteAlias: state.whiteAlias,
                blackAlias: state.blackAlias
              };
    case "SetState" :
        return action._0;
    case "SetLastBackup" :
        return {
                avoidPairs: state.avoidPairs,
                byeValue: state.byeValue,
                lastBackup: action._0,
                whiteAlias: state.whiteAlias,
                blackAlias: state.blackAlias
              };
    case "SetWhiteAlias" :
        return {
                avoidPairs: state.avoidPairs,
                byeValue: state.byeValue,
                lastBackup: state.lastBackup,
                whiteAlias: Data_Config$Coronate.alias(action._0),
                blackAlias: state.blackAlias
              };
    case "SetBlackAlias" :
        return {
                avoidPairs: state.avoidPairs,
                byeValue: state.byeValue,
                lastBackup: state.lastBackup,
                whiteAlias: state.whiteAlias,
                blackAlias: Data_Config$Coronate.alias(action._0)
              };
    
  }
}

function useAllItemsFromDb(data) {
  var match = React.useReducer(genericDbReducer, data);
  return {
          items: match[0],
          dispatch: match[1],
          loaded: true
        };
}

function useAllPlayers() {
  return useAllItemsFromDb(TestData$Coronate.players);
}

function useAllTournaments() {
  return useAllItemsFromDb(TestData$Coronate.tournaments);
}

function useConfig() {
  return React.useReducer(configReducer, TestData$Coronate.config);
}

function useAuth() {
  return [
          Data_Auth$Coronate.default,
          (function (param) {
              
            })
        ];
}

export {
  loadDemoDB ,
  Config ,
  Tournament ,
  Player ,
  tournaments ,
  useAllPlayers ,
  useAllTournaments ,
  useConfig ,
  useAuth ,
}
/* Config Not a pure module */
